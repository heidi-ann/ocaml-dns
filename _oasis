OASISFormat: 0.4
Name:        dns
Version:     0.14.0
Authors:     Anil Madhavapeddy, Tim Deegan, Richard Mortier, Haris Rotsos, David Sheets, Thomas Gazagnaire, Luke Dunstan
Maintainers: Anil Madhavapeddy <anil@recoil.org>
License:     ISC
Synopsis:    DNS client and server implementation
Description: This is a pure OCaml implementation of the DNS protocol.
  It is intended to be a reasonably high-performance implementation,
  but clarity is preferred rather than low-level performance hacks.
Homepage:    https://github.com/mirage/ocaml-dns
Plugins:     META (0.4)
BuildTools:  ocamlbuild

Flag lwt
  Description: build the Lwt library
  Default: false

Flag nettests
  Description: run the internet-using tests
  Default: false

Flag mirage
  Description: build the Mirage library
  Default: false

Flag async
  Description: build the Async library
  Default: false

Library dns
  Path: lib
  Findlibname: dns
  Pack: true
  Modules:
    Hashcons, Loader, Name, Operators, Packet, Query, RR, Trie,
    Zone, Zone_lexer, Zone_parser, Resolvconf, Buf, Protocol, Cache
  BuildDepends:	cstruct (>= 0.7.1), cstruct.syntax, re, re.str, ipaddr (>= 2.2.0), base64 (>= 2.0.0), bytes
  XMetaRequires: cstruct, re, re.str, ipaddr, base64, bytes

Library "dns-lwt"
  Path: lwt
  Build$: flag(lwt)
  Install$: flag(lwt)
  Findlibname: lwt
  Modules: Dns_server_unix, Dns_resolver_unix
  BuildDepends: lwt.unix (>= 2.4.1), cstruct.lwt, lwt.syntax, dns, dns.lwt-core, ipaddr.unix
  XMetaRequires: lwt.unix, cstruct.lwt, dns, dns.lwt-core, ipaddr.unix
  FindlibParent: dns

Library "dns-lwt-mirage"
  Path: mirage
  Build$: flag(mirage)
  Install$: flag(mirage)
  Findlibname: mirage
  Modules: Dns_server_mirage, Dns_resolver_mirage
  BuildDepends: cstruct, lwt.syntax, dns, dns.lwt-core, mirage-types, io-page
  XMetaRequires: cstruct, dns, dns.lwt-core, tcpip, mirage-types, io-page
  FindlibParent: dns

Library "dns-lwt-core"
  Path: lwt
  Build$: flag(lwt)
  Install$: flag(lwt)
  Findlibname: lwt-core
  Modules: Dns_server, Dns_resolver
  BuildDepends: lwt, cstruct, lwt.syntax, dns
  XMetaRequires: lwt, cstruct, dns
  FindlibParent: dns

Library "dns-async"
  Path: async
  Build$: flag(async)
  Install$: flag(async)
  Findlibname: async
  Modules: Async_dns_resolver, Async_dns_resolver_unix
  BuildDepends: async, ipaddr, dns, core.syntax, threads
  XMetaRequires: async, ipaddr, dns, threads
  FindlibParent: dns

Document dns
  Title:                DNS docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  XOCamlbuildPath:      lib
  XOCamlbuildModules:
    Hashcons, Loader, Name, Operators, Packet, Query, RR, Trie,
    Zone, Zone_lexer, Zone_parser, Resolvconf, Buf, Protocol

Document dns_lwt
  Title:                DNS Lwt docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(lwt)
  XOCamlbuildPath:      lwt
  XOCamlbuildModules:   Dns_resolver, Dns_server

Executable lwt_server
  Path:               lib_test/unix
  MainIs:             lwt_server.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, re, re.str, dns, dns.lwt

Executable time_server
  Path:               lib_test/unix
  MainIs:             time_server.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, re, re.str, dns.lwt

Executable mldig
  Path:               lwt
  MainIs:             mldig.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, lwt.syntax, dns, dns.lwt, re, re.str, ipaddr, cmdliner

Executable async_resolver
  Path:               lib_test/async
  MainIs:             test_async_dns_resolver_unix.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       async, dns.async

Executable test
  Path:               lib_test/ounit
  MainIs:             test.ml
  Build$:             flag(tests)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       dns, unix, oUnit, pcap-format

Test test
  Run$:               flag(tests)
  Command:            $test
  WorkingDirectory:   lib_test/ounit

